burnin <- 200
n.gibbs.draws <- 6e3
vars.scale <- 0.5
anisotropy <- 1
analysis.name <- sprintf("n%d_k%d_p%d_sims%d_scale%0.1f_anisotropy%0.1f_%ddraws",
n, k, p, n.sims, vars.scale, anisotropy, n.gibbs.draws)
cov.list <- list()
sim.list <- list()
timing.list <- list()
sim.results <- list()
cat(file=foreach.progress.file, sim, " ", Sys.time(), "\n")
par <- GenerateSampleParams(k=k, p=p, vars.scale=vars.scale,
anisotropy=anisotropy, random.rotation=FALSE)
results <- SimulateAndFitMVNMixture(n, k, p, par,
fit.vb=TRUE, fit.gibbs=TRUE,
n.gibbs.draws=n.gibbs.draws,
burnin=burnin)
# Generate data
data <- GenerateMultivariateData(n, par$true.means, par$true.sigma, par$true.probs)
priors <- GenerateSamplePriors(x=data$x, k=k)
analysis.hash <- digest(list(data, par))
priors
true.means
true.means <- par$true.means
true.means
is.null(NULL)
is.null(2)
priors
priors$mu.prior.mean <- zeros(k, p)
priors$mu.prior.mean <- zero(k, p)
prior.obs <- 1 # The number of equivalent observations in the prior.
mu.prior.mean  <- matrix(0, nrow=p, ncol=k)
x.prior.scale <- 10.0
if (p > 1) {
mu.prior.info.mat <- diag(x=prior.obs / (x.scale ^ 2))
} else {
# Seriously, R?  diag() of a single number is a 0x0 matrix.
mu.prior.info.mat <- matrix(prior.obs / (x.scale ^ 2))
}
mu.prior.info <- matrix(ConvertSymmetricMatrixToVector(mu.prior.info.mat),
nrow=matrix.size, ncol=k)
prior.obs <- 1 # The number of equivalent observations in the prior.
mu.prior.mean  <- matrix(0, nrow=p, ncol=k)
x.prior.scale <- 10.0
if (p > 1) {
mu.prior.info.mat <- diag(x=prior.obs / (x.scale ^ 2))
} else {
# Seriously, R?  diag() of a single number is a 0x0 matrix.
mu.prior.info.mat <- matrix(prior.obs / (x.scale ^ 2))
}
mu.prior.info <- matrix(ConvertSymmetricMatrixToVector(mu.prior.info.mat),
nrow=matrix.size, ncol=k)
if (p > 1) {
mu.prior.info.mat <- diag(x=prior.obs / (x.prior.scale ^ 2))
} else {
# Seriously, R?  diag() of a single number is a 0x0 matrix.
mu.prior.info.mat <- matrix(prior.obs / (x.prior.scale ^ 2))
}
mu.prior.info <- matrix(ConvertSymmetricMatrixToVector(mu.prior.info.mat),
nrow=matrix.size, ncol=k)
matrix.size <- (p * (p + 1)) / 2
mu.prior.info <- matrix(ConvertSymmetricMatrixToVector(mu.prior.info.mat),
nrow=matrix.size, ncol=k)
lambda.prior.n <- rep(prior.obs, k)
lambda.prior.v.inv.list <- list()
for (this.k in 1:k) {
lambda.prior.v.inv.list[[this.k]] <- prior.obs * diag(x.scale ^ 2)
}
lambda.prior.v.inv <- VectorizeMatrixList(lambda.prior.v.inv.list)
lambda.prior.n <- rep(prior.obs, k)
lambda.prior.v.inv.list <- list()
for (this.k in 1:k) {
lambda.prior.v.inv.list[[this.k]] <- prior.obs * diag(x.prior.scale ^ 2)
}
lambda.prior.v.inv <- VectorizeMatrixList(lambda.prior.v.inv.list)
priors <- list(mu.prior.mean=mu.prior.mean, mu.prior.info=mu.prior.info,
lambda.prior.v.inv=lambda.prior.v.inv, lambda.prior.n=lambda.prior.n,
p.prior.alpha=p.prior.alpha)
p.prior.alpha <- rep(prior.obs, k)
priors <- list(mu.prior.mean=mu.prior.mean, mu.prior.info=mu.prior.info,
lambda.prior.v.inv=lambda.prior.v.inv, lambda.prior.n=lambda.prior.n,
p.prior.alpha=p.prior.alpha)
analysis.name <- sprintf("n%d_k%d_p%d_sims%d_scale%0.1f_anisotropy%0.1f_%ddraws",
n, k, p, n.sims, vars.scale, anisotropy, n.gibbs.draws)
cov.list <- list()
sim.list <- list()
timing.list <- list()
sim.results <- list()
foreach.progress.file <- file(".foreach_progress", "w")
source("simulate_mvn_mixture_lib.R")
print("hello")
TRUE || print("sfd")
FALSE || print("sfd")
FALSE | print("sfd")
source("simulate_mvn_mixture_lib.R")
# Set the priors.
prior.obs <- 1 # The number of equivalent observations in the prior.
mu.prior.mean  <- matrix(0, nrow=p, ncol=k)
x.prior.scale <- 10.0
if (p > 1) {
mu.prior.info.mat <- diag(x=prior.obs / (x.prior.scale ^ 2))
} else {
# Seriously, R?  diag() of a single number is a 0x0 matrix.
mu.prior.info.mat <- matrix(prior.obs / (x.prior.scale ^ 2))
}
mu.prior.info <- matrix(ConvertSymmetricMatrixToVector(mu.prior.info.mat),
nrow=matrix.size, ncol=k)
# The lambda prior.
lambda.prior.n <- rep(prior.obs, k)
lambda.prior.v.inv.list <- list()
for (this.k in 1:k) {
lambda.prior.v.inv.list[[this.k]] <- prior.obs * diag(x.prior.scale ^ 2)
}
lambda.prior.v.inv <- VectorizeMatrixList(lambda.prior.v.inv.list)
p.prior.alpha <- rep(prior.obs, k)
priors <- list(mu.prior.mean=mu.prior.mean, mu.prior.info=mu.prior.info,
lambda.prior.v.inv=lambda.prior.v.inv, lambda.prior.n=lambda.prior.n,
p.prior.alpha=p.prior.alpha)
priors
mu.prior.mean
mu.prior.info
mu.prior.info <- matrix(ConvertSymmetricMatrixToVector(mu.prior.info.mat),
nrow=matrix.size, ncol=k)
mu.prior.info
mu.prior.info.mat
if (p > 1) {
mu.prior.info.mat <- diag(x=prior.obs / (x.prior.scale ^ 2))
} else {
# Seriously, R?  diag() of a single number is a 0x0 matrix.
mu.prior.info.mat <- matrix(prior.obs / (x.prior.scale ^ 2))
}
mu.prior.info.mat
p
diag(x=prior.obs / (x.prior.scale ^ 2))
(x.prior.scale ^ 2)
prior.obs
x.prior.scale <- rep(10.0, p)
if (p > 1) {
mu.prior.info.mat <- diag(x=prior.obs / (x.prior.scale ^ 2))
} else {
# Seriously, R?  diag() of a single number is a 0x0 matrix.
mu.prior.info.mat <- matrix(prior.obs / (x.prior.scale ^ 2))
}
mu.prior.info <- matrix(ConvertSymmetricMatrixToVector(mu.prior.info.mat),
nrow=matrix.size, ncol=k)
mu.prior.info
lambda.prior.n <- rep(prior.obs, k)
lambda.prior.v.inv.list <- list()
for (this.k in 1:k) {
lambda.prior.v.inv.list[[this.k]] <- prior.obs * diag(x.prior.scale ^ 2)
}
lambda.prior.v.inv <- VectorizeMatrixList(lambda.prior.v.inv.list)
lambda.prior.v.inv
p.prior.alpha
p.prior.alpha <- rep(prior.obs, k)
priors <- list(mu.prior.mean=mu.prior.mean, mu.prior.info=mu.prior.info,
lambda.prior.v.inv=lambda.prior.v.inv, lambda.prior.n=lambda.prior.n,
p.prior.alpha=p.prior.alpha)
priors
analysis.name <- sprintf("n%d_k%d_p%d_sims%d_scale%0.1f_anisotropy%0.1f_%ddraws",
n, k, p, n.sims, vars.scale, anisotropy, n.gibbs.draws)
cov.list <- list()
sim.list <- list()
timing.list <- list()
sim.results <- list()
foreach.progress.file <- file(".foreach_progress", "w")
cat(file=foreach.progress.file, sim, " ", Sys.time(), "\n")
par <- GenerateSampleParams(k=k, p=p, vars.scale=vars.scale, priors=priors,
anisotropy=anisotropy, random.rotation=FALSE)
sim <- 1
cat(file=foreach.progress.file, sim, " ", Sys.time(), "\n")
par <- GenerateSampleParams(k=k, p=p, vars.scale=vars.scale, priors=priors,
anisotropy=anisotropy, random.rotation=FALSE)
results <- SimulateAndFitMVNMixture(n, k, p, par, priors=priors,
fit.vb=TRUE, fit.gibbs=TRUE,
n.gibbs.draws=n.gibbs.draws,
burnin=burnin)
?rnmixGibbs
priors
priors$mu.prior.mean[,1]
ConvertVectorToSymmetricMatrix(x_vec = c(1,0,1))
ConvertVectorToSymmetricMatrix(priors$mu.prior.info[,1])
ConvertVectorToSymmetricMatrix(priors$lambda.prior.n
)
ConvertVectorToSymmetricMatrix(priors$lambda.prior.n)
priors$lambda.prior.n
solve(ConvertVectorToSymmetricMatrix(priors$lambda.prior.v.inv[,1]
)
)
lambda.prior.v.inv
prior.obs
prior.list <- list(ncomp=k,
Mubar=priors$mu.prior.mean[,1],
A=ConvertVectorToSymmetricMatrix(priors$mu.prior.info[,1]),
nu=priors$lambda.prior.n[1],
V=solve(ConvertVectorToSymmetricMatrix(priors$lambda.prior.v.inv[,1])),
a=priors$p.prior.alpha)
out <- rnmixGibbs(Data=list(y=data$x),
Prior=prior.list,
Mcmc=list(R=n.gibbs.draws + burnin, keep=1))
print(gibbs.time <- Sys.time() - gibbs.time)
ConvertVectorToSymmetricMatrix(priors$mu.prior.info[,1])
prior.list <- list(ncomp=k,
Mubar=priors$mu.prior.mean[,1],
A=priors$mu.prior.info[1,1],
nu=priors$lambda.prior.n[1],
V=solve(ConvertVectorToSymmetricMatrix(priors$lambda.prior.v.inv[,1])),
a=priors$p.prior.alpha)
out <- rnmixGibbs(Data=list(y=data$x),
Prior=prior.list,
Mcmc=list(R=n.gibbs.draws + burnin, keep=1))
priors$mu.prior.info[1,1]
ConvertVectorToSymmetricMatrix(priors$mu.prior.info[1,1])
ConvertVectorToSymmetricMatrix(priors$mu.prior.info[,1])
prior.list <- list(ncomp=k,
Mubar=priors$mu.prior.mean[,1],
A=matrix(ConvertVectorToSymmetricMatrix(priors$mu.prior.info[,1]),1,1),
nu=priors$lambda.prior.n[1],
V=solve(ConvertVectorToSymmetricMatrix(priors$lambda.prior.v.inv[,1])),
a=priors$p.prior.alpha)
out <- rnmixGibbs(Data=list(y=data$x),
Prior=prior.list,
Mcmc=list(R=n.gibbs.draws + burnin, keep=1))
source("simulate_mvn_mixture_lib.R")
source("simulate_mvn_mixture_lib.R")
par <- GenerateSampleParams(k=k, p=p, vars.scale=vars.scale,
anisotropy=anisotropy, random.rotation=FALSE)
if (kShowPlots) {
data <- GenerateMultivariateData(1e4, par$true.means, par$true.sigma, par$true.probs)
df.col.names <- paste("X", 1:p, sep="")
x <- data$x
x.df <- data.frame(data$x)
means.df <- data.frame(t(par$true.means))
names(means.df) <- df.col.names
x.df$label <- factor(data$component.labels)
if (p >= 2) {
ggplot() +
geom_density2d(data=x.df, aes(x=X1, y=X2, group=label, color=label)) +
geom_point(data=means.df, aes(x=X1, y=X2), color="red", size=5)
} else if (p == 1) {
ggplot() +
geom_density(data=x.df, aes(x=X1, group=label, color=label, lwd=2)) +
geom_vline(data=means.df, aes(xintercept=X1), color="red", size=1)
}
}
results <- SimulateAndFitMVNMixture(n, k, p, par, priors=priors,
fit.vb=TRUE, fit.gibbs=TRUE,
n.gibbs.draws=n.gibbs.draws,
burnin=burnin)
CopyListToEnvironment(results, environment())
core.names <- CoreParameterNamesFromMLE(k, p)
truth.means <- c(true.means, true.lambda, log(true.probs))
core.vb.means <- CoreMeansFromVB(vb.optimum)
core.vb.sd <- sqrt(CoreVarsFromVB(vb.optimum))
lrvb.vars <- diag(lrvb.theta.cov)
lrvb.vars.list <- UnpackVBThetaParameters(lrvb.vars, n, p, k)
core.vb.indices <- GetCoreVBThetaIndices(n, p, k)
core.vb.index.vec <- c(core.vb.indices$mu_indices,
core.vb.indices$lambda_indices,
core.vb.indices$log_pi_indices) + 1
core.lrvb.vars <- c(lrvb.vars.list$e_mu, lrvb.vars.list$e_lambda, lrvb.vars.list$e_log_pi)
core.lrvb.sd <- sqrt(core.lrvb.vars)
core.lrvb.cov <- lrvb.theta.cov[core.vb.index.vec, core.vb.index.vec]
sim.df <- data.frame(sim=sim,
var=core.names,
truth.mean=truth.means,
gibbs.mean=core.gibbs.results$means,
gibbs.sd=core.gibbs.results$sds,
gibbs.effsize=results$core.gibbs.effsize,
vb.mean=core.vb.means,
vb.sd=core.vb.sd,
lrvb.sd=core.lrvb.sd)
x.prior.scale
mu.prior.info.mat
p.prior.alpha <- rep(5, k)
priors <- list(mu.prior.mean=mu.prior.mean, mu.prior.info=mu.prior.info,
lambda.prior.v.inv=lambda.prior.v.inv, lambda.prior.n=lambda.prior.n,
p.prior.alpha=p.prior.alpha)
cat(file=foreach.progress.file, sim, " ", Sys.time(), "\n")
par <- GenerateSampleParams(k=k, p=p, vars.scale=vars.scale,
anisotropy=anisotropy, random.rotation=FALSE)
if (kShowPlots) {
data <- GenerateMultivariateData(1e4, par$true.means, par$true.sigma, par$true.probs)
df.col.names <- paste("X", 1:p, sep="")
x <- data$x
x.df <- data.frame(data$x)
means.df <- data.frame(t(par$true.means))
names(means.df) <- df.col.names
x.df$label <- factor(data$component.labels)
if (p >= 2) {
ggplot() +
geom_density2d(data=x.df, aes(x=X1, y=X2, group=label, color=label)) +
geom_point(data=means.df, aes(x=X1, y=X2), color="red", size=5)
} else if (p == 1) {
ggplot() +
geom_density(data=x.df, aes(x=X1, group=label, color=label, lwd=2)) +
geom_vline(data=means.df, aes(xintercept=X1), color="red", size=1)
}
}
results <- SimulateAndFitMVNMixture(n, k, p, par, priors=priors,
fit.vb=TRUE, fit.gibbs=TRUE,
n.gibbs.draws=n.gibbs.draws,
burnin=burnin)
CopyListToEnvironment(results, environment())
core.names
core.names <- CoreParameterNamesFromMLE(k, p)
truth.means <- c(true.means, true.lambda, log(true.probs))
core.vb.means <- CoreMeansFromVB(vb.optimum)
core.vb.sd <- sqrt(CoreVarsFromVB(vb.optimum))
lrvb.vars <- diag(lrvb.theta.cov)
lrvb.vars.list <- UnpackVBThetaParameters(lrvb.vars, n, p, k)
core.vb.indices <- GetCoreVBThetaIndices(n, p, k)
core.vb.index.vec <- c(core.vb.indices$mu_indices,
core.vb.indices$lambda_indices,
core.vb.indices$log_pi_indices) + 1
core.lrvb.vars <- c(lrvb.vars.list$e_mu, lrvb.vars.list$e_lambda, lrvb.vars.list$e_log_pi)
core.lrvb.sd <- sqrt(core.lrvb.vars)
core.lrvb.cov <- lrvb.theta.cov[core.vb.index.vec, core.vb.index.vec]
sim.df <- data.frame(sim=sim,
var=core.names,
truth.mean=truth.means,
gibbs.mean=core.gibbs.results$means,
gibbs.sd=core.gibbs.results$sds,
gibbs.effsize=results$core.gibbs.effsize,
vb.mean=core.vb.means,
vb.sd=core.vb.sd,
lrvb.sd=core.lrvb.sd)
core.vb.means
core.gibbs.results$means
plot(core.gibbs.results$means, core.vb.means)
plot(core.gibbs.results$means, core.vb.means); abline(0,1)
source("simulate_mvn_mixture_lib.R")
priors <- DefaultPriors(p=p, k=k)
priors
library(RcppEigen)
library(Rcpp)
library(Matrix)
library(mvtnorm)
library(ggplot2)
library(numDeriv)
library(reshape2)
library(dplyr)
library(digest)
library(gridExtra)
library(doParallel)
library(foreach)
library(optparse)
library(MVNMixtureLRVB)
setwd(file.path(Sys.getenv("GIT_REPO_LOC"),
"LinearResponseVariationalBayesNIPS2015/",
"variational_normal_mixture"))
source("simulate_mvn_mixture_lib.R")
option_list <- list(
make_option(c("--cores"), type="integer", default=1,
help="Number of cores to use [default %default]",
metavar="cores")
)
# Get command line options.
opt <- parse_args(OptionParser(option_list=option_list))
registerDoParallel(cores = opt$cores)
kShowPlots <- FALSE
n.range <- 5000
k.range <- 2
reps <- 2
p.range <- c(2, 3, 4, 5, 7, 8, 9, 10, 12, 15, 18, 22)
analysis.name <- "new_scaling_p"
anisotrophy <- 0
vars.scale <- 0.4
burnin <- 200
n.gibbs.draws <- 6e3
iters <- reps * length(n.range) * length(k.range) * length(p.range)
all.results <- list()
iter <- 1
foreach.progress.file <- file(".foreach_progress_scaling", "w")
p.index <- 1
iter <- 0
results.list <- list()
p <- p.range[p.index]
for (k in k.range) {
for (n in n.range) {
par <- GenerateSampleParams(k=k, p=p, vars.scale=vars.scale,
anisotropy=anisotrophy, random.rotation=FALSE)
for (rep in 1:reps) {
cat(file=foreach.progress.file, "simulation progress: ", n, k, p, rep, Sys.time(), "\n")
if (n <= 10000) {
fit.gibbs <- TRUE
} else {
# Gibbs is prohibitively slow on very large datasets.
fit.gibbs <- FALSE
}
priors <- DefaultPriors(p=p, k=k)
results <- SimulateAndFitMVNMixture(n, k, p, par, priors=priors,
fit.vb=TRUE, fit.gibbs=fit.gibbs,
n.gibbs.draws=n.gibbs.draws,
burnin=burnin)
iter <- iter + 1
results.list[[iter]] <- results
}
}
}
results.list
library(ggplot2)
library(dplyr)
library(reshape2)
library(jsonlite)
library(gridExtra)
base.dir <- "~/Documents/git_repos/variational_bayes/poisson_glmm/"
setwd(base.dir)
source(file.path(base.dir, "r_analysis/r_analysis_lib.R"))
data.path <- file.path(base.dir, "data")
analysis.name <- "poisson_glmm_z_theta_cov"
analysis.range <- "1_100"
full.cov <- FALSE
filename <- file.path(data.path, sprintf("%s_%s_results.csv", analysis.name, analysis.range))
results <- read.csv(filename, header=T)
results1 <- filter(results, measurement %in%  c("mean", "sd"),
variable %in% c("mu", "tau", "log_tau")) %>%
dcast(sim.id + variable + measurement ~ method)
ggplot(filter(results1, measurement == "mean")) +
geom_point(aes(x=mcmc, y=mfvb), size=3) +
geom_abline(aes(intercept=0, slope=1)) +
expand_limits(x=0, y=0) +
geom_abline(aes(slope=1, intercept=0), color="gray") +
facet_grid(~ variable)
base.dir <- file.path(Sys.getenv("GIT_REPO_LOC"),
"LinearResponseVariationalBayesNIPS2015/",
"poisson_glmm")
setwd(base.dir)
library(lme4)
library(MCMCglmm)
library(coda)
library(jsonlite)
base.dir <- file.path(Sys.getenv("GIT_REPO_LOC"),
"LinearResponseVariationalBayesNIPS2015/",
"poisson_glmm")
setwd(base.dir)
source(file.path(base.dir, "r_analysis/r_analysis_lib.R"))
data.path <- file.path(base.dir, "data")
analysis.name <- "poisson_glmm_z_theta_cov"
save.results <- TRUE
save.z <- TRUE
save.cov <- TRUE
if (!save.z) {
stopifnot(!save.cov)
}
mcmc.iters <- 20000
result.list <- list()
theta.cov.list <- list()
theta.z.cov.list <- list()
id_range = c(1, 100)
for (sim.id in id_range[1]:id_range[2]) {
print(sprintf("Simulation %d", sim.id))
filename <- sprintf("%s_%d.json", analysis.name, sim.id)
json.file <- file(file.path(data.path, filename), "r")
my.dat <- fromJSON(readLines(json.file, warn=FALSE))
close(json.file)
ReadVBResults(my.dat, sim.id)
mcmc.res <- GenerateMCMCResults(my.dat, sim.id, mcmc.iters, save.z=save.z)
if (save.cov) {
stopifnot(save.z) # You need the full thing for this to work.
sim.char <- as.character(sim.id)
mcmc.cov <- GetMCMCCov(mcmc.res, my.dat)
mcmc.theta.cov <- mcmc.cov$theta.cov
mcmc.theta.z.cov <- t(mcmc.cov$theta.z.cov)
lrvb.theta.z.cov <- my.dat$lrvb_cov_thetaz
lrvb.theta.cov <- my.dat$theta_lrvb_cov
mfvb.theta.cov <- my.dat$theta_mfvb_cov
diag(lrvb.theta.cov) <- 0
diag(mfvb.theta.cov) <- 0
diag(mcmc.theta.cov) <- 0
theta.z.cov.len <- length(as.numeric(lrvb.theta.z.cov))
theta.z.cov.list[[length(theta.z.cov.list) + 1]] <-
data.frame(sim.id=sim.id, method="lrvb", component=1:theta.z.cov.len,
x=as.numeric(lrvb.theta.z.cov))
theta.z.cov.list[[length(theta.z.cov.list) + 1]] <-
data.frame(sim.id=sim.id, method="mcmc", component=1:theta.z.cov.len,
x=as.numeric(mcmc.theta.z.cov))
theta.cov.len <- length(as.numeric(lrvb.theta.cov))
theta.cov.list[[length(theta.cov.list) + 1]] <-
data.frame(sim.id=sim.id, method="lrvb", component=1:theta.cov.len,
x=as.numeric(lrvb.theta.cov))
theta.cov.list[[length(theta.cov.list) + 1]] <-
data.frame(sim.id=sim.id, method="mfvb", component=1:theta.cov.len,
x=as.numeric(mfvb.theta.cov))
theta.cov.list[[length(theta.cov.list) + 1]] <-
data.frame(sim.id=sim.id, method="mcmc", component=1:theta.cov.len,
x=as.numeric(mcmc.theta.cov))
}
# # NB: Optimized frequentist methods beat everything on this problem.
# d$c <- factor(1:nrow(d))
# glmm.res <- glmer(y ~ x - 1 + (1|c), d, family=poisson)
# summary(glmm.res)
}
# Append some values common to all analyses
ResultRow(-1, "analysis", "n", "truth", value=my.dat$n)
ResultRow(-1, "analysis", "mcmc_iters", "truth", value=mcmc.iters)
ResultRow(-1, "analysis", "mu_prior_var", "truth", value=my.dat$mu_prior_var)
ResultRow(-1, "analysis", "tau_prior_alpha", "truth", value=my.dat$tau_prior_alpha)
ResultRow(-1, "analysis", "tau_prior_beta", "truth", value=my.dat$tau_prior_beta)
id_range_string = sprintf("%d_%d", id_range[1], id_range[2])
if (save.results) {
out.filename <- file.path(data.path, sprintf("%s_%s_results.csv", analysis.name, id_range_string))
write.csv(do.call(rbind, result.list), file=out.filename, quote=F, row.names=F)
theta.out.filename <- file.path(data.path,
sprintf("%s_%s_theta_cov_results.csv",
analysis.name, id_range_string))
write.csv(do.call(rbind, theta.cov.list), file=theta.out.filename, quote=F, row.names=F)
theta.z.out.filename <- file.path(data.path,
sprintf("%s_%s_theta_z_cov_results.csv",
analysis.name, id_range_string))
write.csv(do.call(rbind, theta.z.cov.list), file=theta.z.out.filename, quote=F, row.names=F)
}
